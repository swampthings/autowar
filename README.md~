Auto War!
================

## Game
This is the coolest game in the world!!!

## E.B.U.R.P Engine
Auto War is based on the EBURP engine, used to make GURK III. Go here to play it: http://pents90.github.io/eburp

This engine was written to make Gurk III, an RPG for [Android](http://play.google.com/store/apps/details?id=com.larvalabs.gurk3) and [iOS](http://itunes.apple.com/us/app/gurk-iii-the-8-bit-rpg/id685128493?mt=8).

## Gurk
Actually, I lied. Gurk is the coolest game in the world. You should check it out!

## Scenario
This is based in a post-apocalyptic Utah, in the year 2997.

## Hard things to do (Not part of engine)

1. Implement Courrier tasks
2. Implement Arena

## Easy things to do (part of Engine)

1. Get road track pictures
2. Make car pictures
3. Make overall Utah County map
4. Make individual maps
5. Come up with abilities
6. Come up with drops
7. Come up with quests
8. Come up with story

## Game files

Have a look at the file 'game/gurkDemo.js'. This is a self-documented JavaScript file that shows you how to customize the game data.
You can also use the map editor by running the Java class gurk.MapEditor.

## Build Instructions

To build the demo game for web, there is a single script you can run: `./build-demo.sh`. That script can be modified to build for other platforms, build different games, etc. Otherwise, these are the steps to building this bad boy:

1. Compile the Java classes in the `tools` directory to a path called `out/production/jurk`. Alternatively (and ideally) use IntelliJ Idea Community Edition to build the tools, as the included Idea project is already set up to do this.
2. Run the Java class gurk.ImageCompiler with two arguments: the game file (`game/gurkDemo.js` for the demo game) and the platform target, which is either `web`, `android` or `ios`.
3. Run the build.sh file, giving it one of three arguments, based on what platform you are targeting:
    `./build.sh web`
    `./build.sh android/assets`
    `./build.sh ios/Gurk/Gurk`
4. For web, simply load `index.html` in a web browser. Note that if you try load it as a `file:` URL instead of hosting it via HTTP, Chrome will complain about security and the game won't run (on platforms with Python installed type `python -m SimpleHTTPServer` in the directory containing `index.html` for a simple webserver). For Android, build and install the included Android project in the 'android' folder. For iOS, build and install the Xcode project in the 'ios' folder.

## Architecture

The engine consists of the following CoffeeScript files: 

* core.coffee - This has all the fundamental drawing and GUI utilities.
* model.coffee - This defines the data model for the game, including heroes, items, creatures and spells.
* adventure.coffee - This defines all the user interface for the entire game except for combat.
* combat.coffee - This is the combat user interface and engine.
* gurk.coffee - This ties everything together and serves as the entry point into the game.

